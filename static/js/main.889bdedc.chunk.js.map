{"version":3,"sources":["redux/pokeDucks.js","components/Pokemones.jsx","redux/store.js","App.jsx","index.js"],"names":["dataInicial","array","offset","OBTNENER_POKEMONES_EXITO","ELIMINAR_POKEMONES_EXITO","Pokemones","dispatch","useDispatch","pokemones","useSelector","store","onClick","getState","a","console","log","axios","get","res","type","payload","data","results","error","length","map","item","name","rootReducer","combineReducers","state","action","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","App","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAIMA,EAAc,CAChBC,MAAO,GACPC,OAAQ,GAINC,EAA2B,2BAC3BC,EAA2B,2BA2B1B,I,OCZQC,EAjBG,WAEd,IAAMC,EAAWC,cAEXC,EAAYC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,UAAUP,SAEvD,OACI,sDACuB,wBAAQU,QAAS,WAAML,EDqBhB,uCAAM,WAAOA,EAAUM,GAAjB,eAAAC,EAAA,6DACxCC,QAAQC,IAAI,0BACZD,QAAQC,IAAIH,KAF4B,kBAIlBI,IAAMC,IAAI,uDAJQ,OAI9BC,EAJ8B,OAKpCZ,EAAS,CAACa,KAAMhB,EACRiB,QAASF,EAAIG,KAAKC,UANU,gDAQpCR,QAAQC,IAAR,MARoC,yDAAN,0DCrBP,gCACnB,wBAAQJ,QAAS,WAAML,EDgCI,uCAAM,WAAOA,EAAUM,GAAjB,SAAAC,EAAA,sDACzC,IACIP,EAAS,CAACa,KAAMf,IAClB,MAAOmB,GACLT,QAAQC,IAAIQ,GAJyB,2CAAN,0DChC3B,iCACCf,EAAUgB,OAAS,EAAM,6BACpBhB,EAAUiB,KAAI,SAAAC,GAAI,OAAK,6BAAqBA,EAAKC,MAAjBD,EAAKC,WACnC,4B,eCRdC,EAAcC,YAAgB,CAChCrB,UFIW,WAAmD,IAA7BsB,EAA4B,uDAApB9B,EAAa+B,EAAO,uCAG7D,OAAOA,EAAOZ,MACV,KAAKhB,EACD,OAAO,2BAAI2B,GAAX,IAAkB7B,MAAO8B,EAAOX,UACpC,KAAKhB,EACD,MAAO,CAACH,MAAO,IACnB,QACI,OAAO6B,MEXbE,EAAmBC,OAAOC,sCAAwCC,ICAzDC,MATf,WACE,IAAM1B,EDWU2B,YAAaT,EAAaI,EAAkBM,YAAgBC,OCV5E,OACE,cAAC,IAAD,CAAU7B,MAAOA,EAAjB,SACE,cAAC,EAAD,OCLN8B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.889bdedc.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\n// constantes\r\n// aca se guardan la informacion de los pokemones\r\nconst dataInicial = {\r\n    array: [],\r\n    offset: 0,\r\n}\r\n\r\n// defino los types de las actions con constantes\r\nconst OBTNENER_POKEMONES_EXITO = 'OBTNENER_POKEMONES_EXITO'\r\nconst ELIMINAR_POKEMONES_EXITO = 'ELIMINAR_POKEMONES_EXITO'\r\n\r\n// reducer \r\n// el reducer segun las acciones que se ejecuten toma la informacion\r\n// y lo envia a las constante(estado)\r\n// se recomienda que el estado inicial que toma el reducer sea \r\n// dataInicial\r\nexport default function pokesReducer(state = dataInicial, action){\r\n    // si es exitoso devuelvo los que estaban en el estado\r\n    // y hago append de los que me mandan en el payload\r\n    switch(action.type){\r\n        case OBTNENER_POKEMONES_EXITO:\r\n            return {...state, array: action.payload}\r\n        case ELIMINAR_POKEMONES_EXITO:\r\n            return {array: []}\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n\r\n// acciones\r\n// las acciones son las funciones que acceden a la store\r\n// con dispatch vamos a activar el reducer y con getState accedemos a la data\r\n// si la llamada asincrona a la api da bien\r\n// llama al reducer con el tipo de accion exitoso\r\n// y le paso lo que obtuvimos de la api\r\nexport const obtenerPokemonesAccion = () => async (dispatch, getState) => {\r\n    console.log('Resultado de getState ')\r\n    console.log(getState())\r\n    try {\r\n        const res = await axios.get('https://pokeapi.co/api/v2/pokemon?offset=0&limit=20')\r\n        dispatch({type: OBTNENER_POKEMONES_EXITO,\r\n                payload: res.data.results})\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\n\r\nexport const eliminarPokemonesAccion = () => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({type: ELIMINAR_POKEMONES_EXITO})\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}","import React from 'react';\r\n\r\n// useDispatch nos sirve para consumir las acciones\r\n// y useSelector para acceder a los datos de la store\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\n// importamos las acciones que queremos usar\r\nimport { obtenerPokemonesAccion, eliminarPokemonesAccion } from '../redux/pokeDucks'\r\n\r\nconst Pokemones = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const pokemones = useSelector(store => store.pokemones.array)\r\n\r\n    return (\r\n        <div>\r\n            Lista de pokemones <button onClick={()=> {dispatch(obtenerPokemonesAccion())}}> Obtener Pokemones</button>\r\n            <button onClick={()=> {dispatch(eliminarPokemonesAccion())}}> Eliminar Pokemones</button>\r\n            {pokemones.length > 0 ?  (<ul>\r\n                { pokemones.map(item => (<li key={item.name}>{item.name}</li>))}\r\n            </ul>): <div/>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Pokemones;","// la idea es que la store es como index.js\r\n// no es un arcchivo que tocamos, solo lo configuramos incialmente\r\n// y le vamos agrengado cosas des de los Ducks\r\n\r\nimport {createStore, combineReducers, compose, applyMiddleware} from 'redux'\r\nimport thunk from 'redux-thunk'\r\n\r\n// lo que importamos de los duck son los reducers que\r\nimport pokesReducer from './pokeDucks'\r\n\r\n// aca conmbinamos todos los reducers \r\n // en nuestros componenetes llamamos a los reducers con \r\n    // el nombre qde aca abajo\r\nconst rootReducer = combineReducers({\r\n    pokemones: pokesReducer\r\n})\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport default function generateStore() {\r\n    const store = createStore( rootReducer, composeEnhancers( applyMiddleware(thunk) ) );\r\n    return store;\r\n}","import React from 'react';\r\nimport Pokemones from './components/Pokemones'\r\n\r\n// este provider es para compartir informacion\r\nimport {Provider} from 'react-redux' \r\nimport generateStore from './redux/store'\r\n\r\nfunction App() {\r\n  const store = generateStore()\r\n  return (\r\n    <Provider store={store}>\r\n      <Pokemones />\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App.jsx';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n\r\n"],"sourceRoot":""}