{"version":3,"sources":["redux/pokeDucks.js","components/Pokemones.jsx","redux/store.js","App.jsx","index.js"],"names":["dataInicial","array","offset","limit","pagina","OBTNENER_POKEMONES_EXITO","SIGUIENTE_POKEMONES_EXITO","ANTERIOR_POKEMONES_EXITO","ELIMINAR_POKEMONES_EXITO","Pokemones","dispatch","useDispatch","pokemones","useSelector","store","onClick","getState","a","nextPage","axios","get","res","type","payload","data","results","console","log","error","siguiente","length","map","item","name","rootReducer","combineReducers","state","action","paging","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","App","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e2f0fe5b.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\n// constantes\r\n// aca se guardan la informacion de los pokemones\r\nconst dataInicial = {\r\n    array: [],\r\n    offset: 0,\r\n    limit: 20,\r\n    pagina: 0,\r\n}\r\n\r\n// defino los types de las actions con constantes\r\nconst OBTNENER_POKEMONES_EXITO = 'OBTNENER_POKEMONES_EXITO'\r\nconst SIGUIENTE_POKEMONES_EXITO = 'SIGUIENTE_POKEMONES_EXITO'\r\nconst ANTERIOR_POKEMONES_EXITO = 'ANTERIOR_POKEMONES_EXITO'\r\nconst ELIMINAR_POKEMONES_EXITO = 'ELIMINAR_POKEMONES_EXITO'\r\n\r\n// reducer \r\n// el reducer segun las acciones que se ejecuten toma la informacion\r\n// y lo envia a las constante(estado)\r\n// se recomienda que el estado inicial que toma el reducer sea \r\n// dataInicial\r\nexport default function pokesReducer(state = dataInicial, action){\r\n    // si es exitoso devuelvo los que estaban en el estado\r\n    // y hago append de los que me mandan en el payload\r\n    switch(action.type){\r\n        case OBTNENER_POKEMONES_EXITO:\r\n            return {...state, array: action.payload.array, limit: action.payload.limit, paging: action.payload.pagina}\r\n        case ELIMINAR_POKEMONES_EXITO:\r\n            return {array: [], offset: 0, pagina: 0, limit: 20}\r\n        case SIGUIENTE_POKEMONES_EXITO:\r\n            return {array: action.payload.array, offset: action.payload.offset, pagina: action.payload.pagina, limit: 20 }\r\n        case ANTERIOR_POKEMONES_EXITO:\r\n            return {array: action.payload.array, offset: action.payload.offset,pagina: action.payload.pagina, limit: 20}\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n\r\n// acciones\r\n// las acciones son las funciones que acceden a la store\r\n// con dispatch vamos a activar el reducer y con getState accedemos a la data\r\n// si la llamada asincrona a la api da bien\r\n// llama al reducer con el tipo de accion exitoso\r\n// y le paso lo que obtuvimos de la api\r\nexport const obtenerPokemonesAccion = () => async (dispatch, getState) => {\r\n    // const offset = getState().pokemones.offset\r\n    // const limit = getState().pokemones.limit\r\n    const limit = getState().pokemones.limit\r\n    const pagina = getState().pokemones.pagina\r\n    const offset = pagina*limit\r\n    const nextPage = pagina === 0 ? 1 : pagina;\r\n    try {   \r\n        const res = await axios.get(`https://pokeapi.co/api/v2/pokemon?offset=${offset}&limit=${limit}`)\r\n        dispatch({type: OBTNENER_POKEMONES_EXITO,\r\n                payload: {array: res.data.results, pagina: nextPage, limit: limit}})\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\n\r\nexport const eliminarPokemonesAccion = () => async (dispatch, getState) => {\r\n    \r\n    try {\r\n        dispatch({type: ELIMINAR_POKEMONES_EXITO})\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\n\r\nexport const siguientePokemonAccion = () => async (dispatch, getState) => {\r\n    // const offset = getState().pokemones.offset\r\n    const limit = getState().pokemones.limit\r\n    const pagina = getState().pokemones.pagina+1\r\n    const offset = pagina*limit\r\n    const siguiente = offset + limit\r\n    try {\r\n        const res = await axios.get(`https://pokeapi.co/api/v2/pokemon?offset=${offset}&limit=${limit}`)\r\n        dispatch({type: SIGUIENTE_POKEMONES_EXITO,\r\n            payload: {array: res.data.results, offset: siguiente,  pagina: pagina}})\r\n    } catch (error) {\r\n        console.error(error)\r\n    }\r\n}\r\n\r\nexport const anteriorPokemonAccion = () => async (dispatch, getState) => {\r\n    // const offset = getState().pokemones.offset\r\n    const limit = getState().pokemones.limit\r\n    const pagina = getState().pokemones.pagina\r\n    const nextPage = pagina === 0 ? 0 : pagina - 1\r\n    const offset = limit*nextPage\r\n    const siguiente = offset + limit\r\n    try {\r\n        const res = await axios.get(`https://pokeapi.co/api/v2/pokemon?offset=${offset}&limit=${limit}`)\r\n        dispatch({type: ANTERIOR_POKEMONES_EXITO,\r\n            payload: {array: res.data.results, offset: siguiente,  pagina: nextPage}})\r\n    } catch (error) {\r\n        console.error(error)\r\n    }\r\n}","import React from 'react';\r\n\r\n// useDispatch nos sirve para consumir las acciones\r\n// y useSelector para acceder a los datos de la store\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\n// importamos las acciones que queremos usar\r\nimport { obtenerPokemonesAccion, eliminarPokemonesAccion, anteriorPokemonAccion,siguientePokemonAccion } from '../redux/pokeDucks'\r\n\r\nconst Pokemones = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const pokemones = useSelector(store => store.pokemones.array)\r\n\r\n    return (\r\n        <div>\r\n            Lista de pokemones <button onClick={()=> {dispatch(obtenerPokemonesAccion())}}> Obtener Pokemones</button>\r\n            <button onClick={()=> {dispatch(eliminarPokemonesAccion())}}> Eliminar Pokemones</button>\r\n            <button onClick={()=> {dispatch(anteriorPokemonAccion())}}> {\"<\"} </button>\r\n            <button onClick={()=> {dispatch(siguientePokemonAccion())}}> {\">\"} </button>\r\n            {pokemones.length > 0 ?  (<ul>\r\n                { pokemones.map(item => (<li key={item.name}>{item.name}</li>))}\r\n            </ul>): <div/>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Pokemones;","// la idea es que la store es como index.js\r\n// no es un arcchivo que tocamos, solo lo configuramos incialmente\r\n// y le vamos agrengado cosas des de los Ducks\r\n\r\nimport {createStore, combineReducers, compose, applyMiddleware} from 'redux'\r\nimport thunk from 'redux-thunk'\r\n\r\n// lo que importamos de los duck son los reducers que\r\nimport pokesReducer from './pokeDucks'\r\n\r\n// aca conmbinamos todos los reducers \r\n // en nuestros componenetes llamamos a los reducers con \r\n    // el nombre qde aca abajo\r\nconst rootReducer = combineReducers({\r\n    pokemones: pokesReducer\r\n})\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport default function generateStore() {\r\n    const store = createStore( rootReducer, composeEnhancers( applyMiddleware(thunk) ) );\r\n    return store;\r\n}","import React from 'react';\r\nimport Pokemones from './components/Pokemones'\r\n\r\n// este provider es para compartir informacion\r\nimport {Provider} from 'react-redux' \r\nimport generateStore from './redux/store'\r\n\r\nfunction App() {\r\n  const store = generateStore()\r\n  return (\r\n    <Provider store={store}>\r\n      <Pokemones />\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App.jsx';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n\r\n"],"sourceRoot":""}